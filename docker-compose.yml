services:
  configuration-server:
    build:
      context: ./services/configuration
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
    restart: always
    depends_on:
      - configuration_db
    links:
      - configuration_db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://configuration_db:5432/configuration?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    networks:
      - monitoring-tools-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8070/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
  analytics-server:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    ports:
      - "8071:8071"
    restart: always
    depends_on:
      - analytics_db
    links:
      - analytics_db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://analytics_db:5432/analytics?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    networks:
      - monitoring-tools-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8071/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
  monitor-server:
    build:
      context: ./services/monitor
      dockerfile: Dockerfile
    ports:
      - "8072:8072"
    restart: always
    depends_on:
      - configuration-server
      - analytics-server
    links:
      - configuration-server
      - analytics-server
    environment:
      CLIENT_URL_CONFIGURATION-SERVER: http://configuration-server:8070/api/v1
      CLIENT_URL_ANALYTICS-SERVER: http://analytics-server:8071/api/v1
    networks:
      - monitoring-tools-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8072/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
  configuration_db:
    container_name: postgres_configuration_container
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: configuration
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql_configuration/data
    networks:
      - monitoring-tools-network
  analytics_db:
    container_name: postgres_analytics_container
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: analytics
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql_analytics/data
    networks:
      - monitoring-tools-network
  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  monitoring-tools-network:
